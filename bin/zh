#!/usr/bin/env node

const path = require("path");
const CMD = require("commander"); // 命令行制作
const glob = require("glob"); // 匹配文件
const inquirer = require("inquirer"); // 终端交互
const downloadGitRepo = require("download-git-repo"); // 下载远程模版
const Metalsmith = require("metalsmith"); // 静态网站生成器
const Handlebars = require("handlebars"); // 模版渲染器

// 初始化 commander
CMD.version("0.0.1");

CMD.command("create <project-name>")
  .description("Create a project")
  .action(function(projectName) {
    // 当前目录下面是否有与创建的项目同名的文件夹
    const hasSameNameFolder =
      glob.sync("*").filter(folderName => folderName === projectName).length >
      0;
    // 项目路径
    const projectPath = path.resolve(process.cwd(), projectName);
    inquirer
      .prompt([
        // 是否确定创建项目
        {
          name: "build",
          message:
            "There are folders with the same name. Are you sure you want to create a project?",
          type: "confirm",
          default: true,
          when: hasSameNameFolder
        },
        // 如何解决项目名与文件夹名冲突
        {
          name: "conflict",
          message: "How to resolve folder conflicts?",
          type: "list",
          choices: ["merge", "overwrite"],
          when: answers => {
            if (answers.build === false) process.exit(1);
            return answers.build === true;
          }
        },
        // 项目支持到特性
        {
          name: "features",
          message: "Select project support features:",
          type: "checkbox",
          choices: [
            { name: "pwa", checked: true },
            { name: "link", checked: true },
            { name: "mock", checked: true }
          ]
        }
      ])
      .then(answers => {
        // 整合项目所有配置
        projectConfig = {
          projectName, // 项目名
          projectPath, // 项目路径
          downloadTempPath: path.join(projectPath, ".download-temp"), // 下载临时目录
          build: true, // 到此步骤肯定是要创建项目
          conflict: "no", // 默认项目名与文件夹名无冲突
          ...answers
        };
        // 下载模版库
        downloadGitRepo(
          "github:treecrow/template-vue-bms#master",
          projectConfig.downloadTempPath,
          {
            clone: true
          },
          err => {
            console.log(err ? "Error" : "Success");
            // 假设成功
            Metalsmith(process.cwd())
              .clean(false) // 不清空资源目的地
              .source(projectConfig.downloadTempPath)
              .destination(projectConfig.projectPath)
              .use((files, metalsmith, done) => {
                Object.keys(files).forEach(fileName => {
                  const curFile = files[fileName];
                  curFile.contents = new Buffer(
                    Handlebars.compile(curFile.contents.toString())(
                      projectConfig
                    )
                  );
                });
                done();
              })
              .build(err => {
                console.log(err ? "Error" : "Success");
              });
          }
        );
      });
  });

// 解析
CMD.parse(process.argv);

// ========== 补充 ==========
// 额外的帮助信息
CMD.on("--help", function() {
  console.log("");
  console.log("Examples:");
  console.log("  $ zh create <project-name>");
});
// 默认展示帮助信息
if (!process.argv[2]) {
  CMD.help();
}
